class BaseException extends Error {

    public name: any;
    public stack: any;
    public context: any;

    constructor(message: any, ...context: any[]) {
        super(message);
        this.message = message;
        this.stack = (<any>(new Error(message))).stack;
        this.name = this.name;
        this.context = context;
    }
}

export class DomainException extends BaseException {
    public isDomain: boolean;
    constructor(message: any, ...context: any[]) {
        super(message, ...context);
        this.isDomain = true;
    }
}

export class InvalidArgumentException extends DomainException {}
export class InvalidOperationException extends DomainException {}
export class ObjectAlreadyExistsException extends DomainException {}
export class ObjectNotFoundException extends DomainException {}
export class SecurityException extends DomainException {}
export class AuthorizationException extends DomainException {}
export class AuthenticationException extends DomainException {}

export class LogicError extends BaseException {}
