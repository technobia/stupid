import {UUID} from "domain/UUID";
const _ = require("underscore");
import Paginator from "framework/Paginator";

export interface Entity<T, A> {
    record: T;
    getId(): UUID;
    getCreatedDate(): Date;
    getUpdatedDate(): Date;
    toJSON(): A;
}

export interface EntityDbRow {
    uuid: string;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
}

export interface EntityDTO {
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    deletedAt?: Date;
}

export interface CreateEntityData {
    id?: UUID;
    createdAt?: Date;
}

export abstract class AbstractEntity<T extends EntityDbRow, A extends EntityDTO> {
    public record: T;

    constructor(record: T) {
        this.record = record;
    }

    public getId(): UUID {
        return new UUID(this.record.uuid);
    }

    public getCreatedDate(): Date {
        return this.record.createdAt || new Date();
    }

    public getUpdatedDate(): Date {
        return this.record.updatedAt || new Date();
    }

    public toJSON(): A {
        return _.extend({
            id: this.record.uuid,
            createdAt: this.record.createdAt,
            updatedAt: this.record.updatedAt,
        }, this._toJSON());
    }

    protected abstract _toJSON(): A;
}

export interface EntityList<T> {
    list: T[];
    paginator: Paginator;
}

export interface EntityCountingList<T> {
    list: T[];
    total: number;
}
