/**
 * Created by x on 02/09/16.
 */
import {MakeCSVReader} from "infrastructure/CSVReader";
import Configuration from "Configuration";
import {GenerateRandomUUID} from "domain/UUID";
import {Text} from "domain/StringTypes";
import {PositiveInt, SmallPositiveInt, TinyPositiveInt} from "domain/Number";
import {MakeMailSender} from "infrastructure/mailer/MailSender";
const json2csv = require("json2csv");
const columns = [
    "plan_title", "plan_name", "plan_id", "uuid", "company_name", "area_of_cover", "master_areas_of_cover",
    "list_of_sub_zone_of_cover_countries_ids", "area_of_residence_plan_availability",
    "list_of_residence_plan_availability_country_ids", "age_minimum", "age_maximum", "currency", "annual_premium",
    "excess", "maximum_cover", "maximum_cover_periodicity", "excess_periodicity", "outpatient_cover_maximum",
    "outpatient_cover_periodicity", "outpatient_cover", "outpatient_cover_information", "dental_cover_maximum",
    "dental_cover_periodicity", "dental_cover", "dental_cover_information", "maternity_cover_maximum",
    "maternity_cover_periodicity", "maternity_cover", "maternity_cover_information", "optical_cover_maximum",
    "optical_cover_periodicity", "optical_cover", "optical_cover_information", "other_highlights",
    "only_expat_insurance", "logo_url", "benefits_schedule_pdf_url", "general_conditions_pdf_url",
    "application_form_pdf_url", "co_branding", "co_branding_link", "electronic_signature_application_link",
];


module.exports = {
    down: function (migration: any) {
        //
    },
    up: function (migration: any) {
        let success = 0, failure = 0;
        let invalidData: any[] = [];
        let parserInvalid: any[] = [];
        MakeCSVReader().read(`${Configuration.ROOT_PATH}resources/csv/company_plans.csv`, function (chunkCsvData) {
            const data = validateData(chunkCsvData.csvData);
            success += data.validRows.length;
            failure += data.invalidRows.length;
            invalidData.push.apply(invalidData, data.invalidRows);
            parserInvalid.push.apply(parserInvalid, chunkCsvData.csvFailedData);
            if (data.validRows.length > 0) {
                try {
                    migration.schema.bulkInsert("company_plans", data.validRows);
                } catch (e) {
                    console.log(e);
                }
            }
        }, columns);
        sendMigrationDoneEmail({ success, failure, invalidData, parserInvalid });
    },
};

function sendMigrationDoneEmail(data: any) {
    let text = `Company plans data has been migrated. \nSuccess: ${data.success}; Failure: ${data.failure}; \n`;
    let attachments: any[] = [];
    if (data.failure > 0) {
        attachments.push({
            filename: "FailedRows.csv",
            content: json2csv({ data: data.invalidData, fields: Object.keys(data.invalidData[0]) }),
        });
    }

    if (data.parserInvalid.length > 0) {
        attachments.push({
            filename: "FailedFromParser.txt",
            content: JSON.stringify(data.parserInvalid),
        });
    }

    MakeMailSender().sendMail({
        text: text,
        to: Configuration.emailConfig.adminEmail,
        subject: "[Ehealthscanner] Migration result",
        attachments: attachments,
    });
}

function validateData(data: any) {
    let invalidRows: any[] = [];
    let validRows: any[] = [];
    data = data.filter(isNotEmptyRow);
    data.forEach((row: any) => {
        try {
            const plan = {
                plan_title: row.plan_title ? new Text(row.plan_title, "medium").value : row.plan_title,
                plan_name: row.plan_name ? new Text(row.plan_name, "medium").value : row.plan_name,
                plan_id: row.plan_id ? new Text(row.plan_id, "medium").value : row.plan_id,
                uuid: GenerateRandomUUID().value,
                plan_case_id: row.uuid,
                company_name: row.company_name ? new Text(row.company_name, "medium").value : row.company_name,
                area_of_cover: row.area_of_cover ? new Text(row.area_of_cover, "long").value : row.area_of_cover,

                master_areas_of_cover:
                row.master_areas_of_cover ?
                    new Text(row.master_areas_of_cover, "small").value :
                    row.master_areas_of_cover,

                list_of_sub_zone_of_cover_countries_ids:
                row.list_of_sub_zone_of_cover_countries_ids ?
                    new Text(row.list_of_sub_zone_of_cover_countries_ids, "long").value :
                    row.list_of_sub_zone_of_cover_countries_ids,

                area_of_residence_plan_availability:
                row.area_of_residence_plan_availability ?
                    new Text(row.area_of_residence_plan_availability, "medium").value :
                    row.area_of_residence_plan_availability,

                list_of_residence_plan_availability_country_ids:
                row.list_of_residence_plan_availability_country_ids ?
                    new Text(row.list_of_residence_plan_availability_country_ids, "long").value :
                    row.list_of_residence_plan_availability_country_ids,

                age_maximum: row.age_maximum ? new SmallPositiveInt(row.age_maximum).value : row.age_maximum,
                age_minimum: row.age_minimum ? new SmallPositiveInt(row.age_minimum).value : row.age_minimum,
                currency: row.currency ? new Text(row.currency, "tiny").value : row.currency,
                annual_premium: row.annual_premium ? new PositiveInt(row.annual_premium).value : row.annual_premium,
                excess: row.excess ? new PositiveInt(row.excess).value : row.excess,
                maximum_cover: row.maximum_cover ? new Text(row.maximum_cover, "small").value : row.maximum_cover,

                maximum_cover_periodicity:
                row.maximum_cover_periodicity ?
                    new Text(row.maximum_cover_periodicity, "small").value :
                    row.maximum_cover_periodicity,

                excess_periodicity:
                row.excess_periodicity ?
                    new Text(row.excess_periodicity, "small").value :
                    row.excess_periodicity,

                outpatient_cover_maximum:
                row.outpatient_cover_maximum ?
                    new Text(row.outpatient_cover_maximum, "small").value :
                    row.outpatient_cover_maximum,

                outpatient_cover_periodicity:
                row.outpatient_cover_periodicity ?
                    new Text(row.outpatient_cover_periodicity, "medium").value :
                    row.outpatient_cover_periodicity,

                outpatient_cover:
                row.outpatient_cover ?
                    new TinyPositiveInt(row.outpatient_cover).value :
                    row.outpatient_cover,

                outpatient_cover_information:
                row.outpatient_cover_information ?
                    new Text(row.outpatient_cover_information, "medium").value :
                    row.outpatient_cover_information,

                dental_cover_maximum:
                row.dental_cover_maximum ?
                    new Text(row.dental_cover_maximum, "small").value :
                    row.dental_cover_maximum,

                dental_cover_periodicity:
                row.dental_cover_periodicity ?
                    new Text(row.dental_cover_periodicity, "small").value :
                    row.dental_cover_periodicity,

                dental_cover:
                row.dental_cover ?
                    new TinyPositiveInt(row.dental_cover).value :
                    row.dental_cover,

                dental_cover_information:
                row.dental_cover_information ?
                    new Text(row.dental_cover_information, "medium").value :
                    row.dental_cover_information,

                maternity_cover_maximum:
                row.maternity_cover_maximum ?
                    new Text(row.maternity_cover_maximum, "small").value :
                    row.maternity_cover_maximum,

                maternity_cover_periodicity:
                row.maternity_cover_periodicity ?
                    new Text(row.maternity_cover_periodicity, "small").value :
                    row.maternity_cover_periodicity,

                maternity_cover:
                row.maternity_cover ?
                    new TinyPositiveInt(row.maternity_cover).value :
                    row.maternity_cover,

                maternity_cover_information:
                row.maternity_cover_information ?
                    new Text(row.maternity_cover_information, "medium").value :
                    row.maternity_cover_information,

                optical_cover_maximum:
                row.optical_cover_maximum ?
                    new Text(row.optical_cover_maximum, "small").value :
                    row.optical_cover_maximum,

                optical_cover_periodicity:
                row.optical_cover_periodicity ?
                    new Text(row.optical_cover_periodicity, "small").value :
                    row.optical_cover_periodicity,

                optical_cover:
                row.optical_cover ?
                    new TinyPositiveInt(row.optical_cover).value :
                    row.optical_cover,

                optical_cover_information:
                row.optical_cover_information ?
                    new Text(row.optical_cover_information, "medium").value :
                    row.optical_cover_information,

                other_highlights:
                row.other_highlights ?
                    new Text(row.other_highlights, "long").value :
                    row.other_highlights,

                only_expat_insurance:
                row.only_expat_insurance ?
                    new TinyPositiveInt(row.only_expat_insurance).value :
                    row.only_expat_insurance,

                logo_url:
                row.logo_url ?
                    new Text(row.logo_url, "medium").value :
                    row.logo_url,

                benefits_schedule_pdf_url:
                row.benefits_schedule_pdf_url ?
                    new Text(row.benefits_schedule_pdf_url, "medium").value :
                    row.benefits_schedule_pdf_url,

                general_conditions_pdf_url:
                row.general_conditions_pdf_url ?
                    new Text(row.general_conditions_pdf_url, "medium").value :
                    row.general_conditions_pdf_url,

                application_form_pdf_url:
                row.application_form_pdf_url ?
                    new Text(row.application_form_pdf_url, "medium").value :
                    row.application_form_pdf_url,

                co_branding:
                row.co_branding ?
                    new TinyPositiveInt(row.co_branding).value :
                    row.co_branding,

                co_branding_link:
                row.co_branding_link ?
                    new Text(row.co_branding_link, "medium").value :
                    row.co_branding_link,

                electronic_signature_application_link:
                row.electronic_signature_application_link ?
                    new Text(row.electronic_signature_application_link, "medium").value :
                    row.electronic_signature_application_link,

            };
            validRows.push(plan);
        } catch (e) {
            row.error = e.message;
            invalidRows.push(row);
        }
    });
    return { invalidRows, validRows };
}

function isNotEmptyRow(row: any) {
    let isEmpty = true;
    columns.forEach((c: string) => {
        if (row[c] !== "") { isEmpty = false; }
    });
    return !isEmpty;
}
