/**
 * Created by jose on 3/10/16.
 */

import DbAdapter from "infrastructure/SequelizeConnection";
import {SequelizeConnection} from "infrastructure/SequelizeConnection";
import WaitForPromise from "infrastructure/WaitForPromise";
import FiberPromise from "infrastructure/FiberPromise";

const winston = require("winston");
const Promise = require("promise");

export default class DatabaseDiscovery {
    private logger: any;
    private wait: any;
    private connection: SequelizeConnection;
    private fiberPromise: any;

    public constructor(connection?: SequelizeConnection, logger?: any, wait?: any, fiberPromise?: any) {
        this.logger = logger || winston;
        this.wait = wait || WaitForPromise;
        this.connection = connection || DbAdapter;
        this.fiberPromise = fiberPromise || FiberPromise;
    }

    public ping(): Promise<void> {
        const host = this.connection.configuration.options.host;
        const port = this.connection.configuration.options.port;
        const user = this.connection.configuration.user;
        const db = this.connection.configuration.db;

        return this.fiberPromise(() => {
            this.logger.info(`PING DATABASE ${host}:${port}/${user}@${db}`);

            while (true) {
                try {
                    const result = this.wait(this.connection.connection.query("SELECT 1 as Pong"));
                    if (result[0][0].Pong === 1) {
                        break;
                    }
                } catch (e) {
                    this.logger.debug(e);
                }
                this.logger.info("ping again...");
                this.wait(new Promise(function(timeoutResolver: any) {
                    setTimeout(timeoutResolver, 10000);
                }));
            }

            this.logger.info("DATABASE PONG");
        });
    }
}
