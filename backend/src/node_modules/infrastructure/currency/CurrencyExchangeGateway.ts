/**
 * Created by jose on 27/09/16.
 */

let https = require("https");
let money = require("money");

import Configuration from "Configuration";
import {ConverterTool, CurrencyQuantity, CurrencyRate} from "framework/CurrencyConverterTool";
import {TimeChecker} from "infrastructure/currency/TimeChecker";

export interface CurrencyExchangeGateway {
    precache(): void;
    getConverter(): ConverterTool;
}

export function MakeCurrencyExchangeGateway(logger?: any, moneyConverter?: any): CurrencyExchangeGateway {
    return new CurrencyExchangeGatewayImpl(logger || console, moneyConverter || money);
}

let eurDollarRate: CurrencyRate = null;
let lastChecked: TimeChecker = new TimeChecker();

class CurrencyExchangeGatewayImpl implements CurrencyExchangeGateway {

    private logger: any;
    private money: any;

    constructor(logger: any, moneyProvider: any) {
        this.logger = logger;
        this.money = moneyProvider;
    }

    public getConverter(): ConverterTool {
        if (this.weNeedToUpdateTheRate()) {
            this.precache();
        }

        if (eurDollarRate == null) {
            this.logger.log("WARNING: convertEurToUSD does not have any effect!");
            return {convertEurToUSD: (value: CurrencyQuantity) => value};
        } else {
            return {
                convertEurToUSD: (value: CurrencyQuantity) => {
                    this.money.base = "EUR";
                    this.money.rates = {"USD" : eurDollarRate.rate};
                    const quantity = this.money.convert(value.quantity, {from: "EUR", to: "USD"});
                    return {
                        currency: "USD",
                        quantity: "" + Math.round(+quantity + .5)
                    };
                }
            };
        }
    }

    public precache(): void {
        this.logger.log("CurrencyExchangeGateway::precache started");
        lastChecked.updateLastChecked();

        https.get(Configuration.API.currencyEurRate + "?t=" + lastChecked.now(), (res: any) => {

            if (res.statusCode < 200 && res.code > 299) {
                this._precacheErrorHandler(new Error("Unexpected return code " + res.statusCode));
                return;
            }

            let message = "";
            res.on("data", (chunk: string) => {
                message += chunk;
            });

            res.on("end", () => {
                try {
                    eurDollarRate = {
                        rate: JSON.parse(message).rates.USD
                    };
                } catch (e) {
                    this._precacheErrorHandler(new Error("Parse error for " + message));
                    return;
                }

                this.logger.log("CurrencyExchangeGateway::precache response => EUR-USD Rate is " + eurDollarRate.rate);
                this.logger.log("CurrencyExchangeGateway::precache ended");
            });

        }).on("error", this._precacheErrorHandler.bind(this));
    }

    private _precacheErrorHandler(e: any) {
        this.logger.error("CurrencyExchangeGateway::precache FAILED!!!", e);
    }

    private weNeedToUpdateTheRate(): boolean {
        const thereIsNoRateYet = eurDollarRate == null;
        return (thereIsNoRateYet && lastChecked.hasPassedFifteenMinutes())
            || lastChecked.hasPassedOneDay();
    }
}
