/**
 * Created by jose on 01/09/2015.
 */

import WaitForPromise from "infrastructure/WaitForPromise";
import Transactional from "infrastructure/Transactional";

export default class TransactionalAspect {

    private wait: any;
    private transactional: any;

    constructor(di = { transactional: {}, wait: {} }) {
        this.wait = di.wait || WaitForPromise;
        this.transactional = di.transactional || Transactional;
    }

    public weave(object: any) {
        const replacement = (method: any) => {
            return this.wait(this.transactional(method.proceed));
        };

        Object.getOwnPropertyNames(object.__proto__)
            .filter(name => name !== "constructor")
            .filter(name => name[0] !== "_")
            .filter(name => typeof object[name] !== "function")
            .forEach(name => {
                const method = object[name].bind(object);
                object[name] = (...args: any[]) => {
                    const methodParam = {proceed: () => method(...args)};
                    return replacement(methodParam);
                };
            });
    }
}
