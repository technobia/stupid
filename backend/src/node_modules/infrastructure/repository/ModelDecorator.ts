import WaitForPromise from "infrastructure/WaitForPromise";
const Promise = require("promise");
export default class ModelDecorator {

    private _model: any;
    private wait: any;

    constructor(model: any) {
        this._model = model;
        this.wait = WaitForPromise;
    }

    public findAll() {
        return this._dispatchCall(this._model.findAll, arguments);
    }

    public update() {
        return this._dispatchCall(this._model.update, arguments);
    }

    public destroy() {
        return this._dispatchCall(this._model.destroy, arguments);
    }

    public findOne(query: any) {
        let resultset = this.wait(this._model.findAll(query));
        let result = (resultset.length === 0) ? null : resultset[0];
        return new Promise(function(resolve: any, reject: any) {
            resolve(result);
        });
    }

    public sync() {
        return this._dispatchCall(this._model.sync, arguments);
    }

    public indexName() {
        return this._dispatchCall(this._model.indexName, arguments);
    }

    public create() {
        return this._dispatchCall(this._model.create, arguments);
    }

    private _dispatchCall(fp: any, args: any) {
        return fp.apply(this._model, args);
    }

}
