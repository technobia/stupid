import SequelizeConnection from "infrastructure/SequelizeConnection";
import WaitForPromise from "infrastructure/WaitForPromise";
const Connection = SequelizeConnection.connection;

const fs = require("fs");

export default class SQLScriptRunner {

    private connection: any;
    private wait: any;

    constructor(connection: any, wait: any) {
        this.connection = connection;
        this.wait = wait;
    }

    public static make(connection?: any, wait?: any) {
        return new this(connection || Connection, wait || WaitForPromise);
    }

    public query(query: string) {
        try {
            return this.wait(this.connection.getQueryInterface().sequelize.query(
                query,
                {type: this.connection.getQueryInterface().sequelize.QueryTypes.RAW}
            ));
        } catch (e) {
            return "";
        }
    }

    public queryBatches(sqlBatches: any) {
        sqlBatches
            .split(/;/)
            .forEach((sql: any) => this.query(sql));
    }

    public queryScript(file: any) {
        const sqlBatches = fs.readFileSync(file).toString();
        return this.queryBatches(sqlBatches);
    }

    public commandScript(file: any) {
        const sqlBatches = fs.readFileSync(file).toString();
        return sqlBatches.split(/\n/)
            .forEach((sql: any) => {
                this.query(sql);
            });
    }
}

