import {LogicError} from "domain/Exception";
import Validator from "./Validator";

type AssertFn = (arg: any, ...args: any[]) => void;

interface Assert {
    (pred: boolean, ...args: any[]): void;
    isAlphaNumeric: AssertFn;
    isAlphaNumericWithInnerSpaces: AssertFn;
    isDate: AssertFn;
    isNonNegativeNumber: AssertFn;
    isNotUndefined: AssertFn;
    isNotUndefinedNorNull: AssertFn;
    isString: AssertFn;
    isUUID: AssertFn;
    nonEmptyString: AssertFn;
    isValidTextSize: AssertFn;
    isNonNegativeInteger: AssertFn;
}

const assert: Assert = (() => {

    let assertObject: any = function(pred: any, ...args: any[]) {
        if (!pred) {
            const errorType = getErrorType(args) || LogicError;
            const msg = getString(args) || "";
            throw new errorType(msg);
        }
    };

    assertObject.check = assertObject;

    Object.keys(Validator).forEach(validatorName => {
        assertObject[validatorName] = function(subject: any, ...args: any[]) {
            const pred = (<any>Validator)[validatorName](subject);
            const msg = getString(args);
            const validatorMessage = `"${JSON.stringify(subject)}" does not satisfy "${validatorName}": ${msg}`;
            this.check(pred, validatorMessage, ...removeElements(args, msg));
        };
    });

    assertObject.matchesProperties = function(actual: any, expected: any, ...args: any[]) {
        this.check(typeof actual === "object", ...args, "Object empty");
        const expectedLength = Object.keys(expected).length;
        this.check(Object.keys(actual).length === expectedLength, ...args, `Object need ${expectedLength} fields`);
        Object.keys(expected).forEach(key => {
            const validator = expected[key] || Validator.isNotUndefined;
            this.check(validator(actual[key]), ...args, `Object has wrong property ${key}`);
        });
    };

    assertObject.equals = function(actual: any, expected: any, ...args: any[]) {
        const msg = getString(args) || "unknown";
        const equalsMsg = `actual: ${actual} expected: ${expected} "${msg}"`;
        this.check(actual === expected, equalsMsg, ...removeElements(args, msg));
    };

    return <Assert> assertObject;

    // private helpers
    function getErrorType(list: any) {
        return list.find((t: any) => t && t.prototype && t.prototype instanceof Error);
    }

    function getString(list: any) {
        return list.find((s: any) => typeof s === "string");
    }

    function removeElements(list: any, ...args: any[]) {
        return list.filter((e: any) => args.indexOf(e) === -1);
    }
})();


export default assert;



