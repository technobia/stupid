/**
 * Created by jose on 04/08/2015.
 */

const moment = require("moment");
const validator = require("validator");

const lib = {
    isAlphaNumeric: (s: any) => nonEmptyString(s) && /^([^\s]\s?)+$/i.test(s),
    isAlphaNumericWithInnerSpaces: (s: any) => nonEmptyString(s) && s.trim() === s && isAlphaNumeric(s.replace(/\s+/g, "")),
    isDate: (d: any) => moment(new Date(d)).isValid(),
    isNonNegativeNumber: (n: any) => typeof n === "number" && n >= 0,
    isNotUndefined: (v: any) => v !== undefined,
    isNotUndefinedNorNull: (v: any) => v !== undefined && v !== null,
    isString: (s: any) => typeof s === "string",
    isUUID: (uuid: any) => validator.isUUID(uuid, 4),
    nonEmptyString: nonEmptyString,
    isValidTextSize: isValidTextSize,
    isNonNegativeInteger: isNonNegativeInteger,
};

function nonEmptyString(s: any) {
    return isString(s) && s.length > 0;
}

function isString(s: any) {
    return typeof s === "string";
}

function isAlphaNumeric(s: any) {
    return nonEmptyString(s) && /^([^\s]\s?)+$/i.test(s);
}

function isValidTextSize(data: any) {
    return isString(data.text) && data.text.length <= data.size;
}

function isNonNegativeInteger(s: any) {
    try {
        const n = parseInt(s, 10);
        return n >= 0;
    } catch (e) {
        return false;
    }
}

export default lib;

