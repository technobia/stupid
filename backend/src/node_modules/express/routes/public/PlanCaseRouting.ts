/**
 * Created by x on 30/08/16.
 */

import {PlanCaseQuerySystem, MakePlanCaseQuerySystem} from "application/system/PlanCaseQuerySystem";
import {Routing} from "express/routes/Routing";
import {InvalidArgumentException} from "domain/Exception";

interface UnparsedPerson {
    id?: string;
    age: string;
    gender?: string;
    nationality?: string;
    relationShip?: string;
    masterAreaOfCover?: string;
    $$hashKey?: string;
}

export default class PlanCaseRouting implements Routing {

    public handlers() {
        return {
            getPlanCases: (req: any, res: any) => {
                validateRequestBody(req.body);
                return query().getByPlanCasesWithPagination({
                    masterAreaOfCover: req.body.masterAreaOfCover,
                    countryOfResidence: req.body.countryOfResidence,
                    nationality: req.body.nationality,
                    numberInsured: req.body.numberInsured,
                    outpatientCover: req.body.outpatientCover,
                    dentalCover: req.body.dentalCover,
                    maternityCover: req.body.maternityCover,
                    opticalCover: req.body.opticalCover,
                    page: req.body.page,
                    maximumCover: req.body.maximumCover,
                    excess: req.body.excess,
                    persons: req.body.persons.filter((u: UnparsedPerson) => u.age !== "")
                        .map(ParsePerson),
                    // @TODO
                    sortBy: req.body.sortBy,
                    sortOrder: req.body.sortOrder,
                });
            },
        };
    }

    public fillRoutes(router: any, handlers: any) {
        router.post("/plans", handlers.getPlanCases);
    }
}

export function ParsePerson(person: UnparsedPerson): any {
    return {
        id: person.id,
        age: person.age,
        gender: person.gender,
        nationality: person.nationality,
        relationShip: person.relationShip,
        masterAreaOfCover: person.masterAreaOfCover,
        $$hashKey: person.$$hashKey,
    };
}

function query(): PlanCaseQuerySystem {
    return MakePlanCaseQuerySystem();
}

function validateRequestBody(body: any) {
    if (!body.masterAreaOfCover || !body.countryOfResidence || !body.nationality ||
        !body.numberInsured || body.numberInsured <= 0 || body.excess === undefined ||
        !body.persons || !(body.persons instanceof Array) ||
        body.persons.filter((u: UnparsedPerson) => u.age !== "").length <= 0) {
        throw new InvalidArgumentException("Invalid request!");
    }
}
