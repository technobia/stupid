/**
 * Created by x on 04/09/16.
 */


import {MakeBuyNowCommandSystem} from "application/system/UserNotificationCommandSystem";
import {Routing} from "express/routes/Routing";
// import {ParseUserNotificationParams, UserNotificationParams} from "domain/user-notification/UserNotification"

interface UnparsedPerson {
    id?: string;
    age: string;
    gender?: string;
    nationality?: string;
    relationShip?: string;
    masterAreaOfCover?: string;
    $$hashKey?: string;
}

export default class UserNotificationRouting implements Routing {

    public handlers() {
        return{
            doBuyNow: (req: any, res: any) =>
                MakeBuyNowCommandSystem().buyNow({
                    planId: req.body.planId,
                    numberInsured: req.body.numberInsured,
                    countryOfResidence: req.body.countryOfResidence,
                    areaOfCover: req.body.areaOfCover,
                    excess: req.body.excess,
                    totalAnnualPremium: req.body.annualPremium,
                    persons:  req.body.persons.filter((u: UnparsedPerson) => u.age !== "")
                        .map(ParsePerson),
                    userInfo: {
                        firstName: req.body.userInfo.firstName,
                        lastName: req.body.userInfo.lastName,
                        email: req.body.userInfo.email,
                        phone: req.body.userInfo.phone,
                        comment: req.body.userInfo.comment,
                    },
                    refId: req.body.refId,
                }),

            doAskUs: (req: any, res: any) =>
                MakeBuyNowCommandSystem().askUs({
                    planId: req.body.planId,
                    numberInsured: req.body.numberInsured,
                    countryOfResidence: req.body.countryOfResidence,
                    areaOfCover: req.body.areaOfCover,
                    excess: req.body.excess,
                    totalAnnualPremium: req.body.annualPremium,
                    persons:  req.body.persons.filter((u: UnparsedPerson) => u.age !== "")
                        .map(ParsePerson),
                    userInfo: {
                        firstName: req.body.userInfo.firstName,
                        lastName: req.body.userInfo.lastName,
                        email: req.body.userInfo.email,
                        phone: req.body.userInfo.phone,
                        request: req.body.userInfo.request,
                        preferred: req.body.userInfo.preferred,
                        location: req.body.userInfo.location,
                        questions: req.body.userInfo.questions,
                    },
                    refId: req.body.refId,
                }),
        };
    }

    public fillRoutes(router: any, handlers: any) {
        router.post("/buynow", handlers.doBuyNow);
        router.post("/askus", handlers.doAskUs);
    }

}

export function ParsePerson(person: UnparsedPerson): any {
    return {
        id: person.id,
        age: person.age,
        gender: person.gender,
        nationality: person.nationality,
        relationShip: person.relationShip,
        masterAreaOfCover: person.masterAreaOfCover,
        $$hashKey: person.$$hashKey,
    };
}
