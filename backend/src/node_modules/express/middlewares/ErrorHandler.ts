/**
 * Created by jose on 10/07/2015.
 */

import {
    ObjectNotFoundException,
    ObjectAlreadyExistsException,
    InvalidArgumentException,
    InvalidOperationException,
    DomainException,
} from "domain/Exception";

import Configuration from "Configuration";

const winston = require("winston");
import {ExpressMiddleware} from "express/middlewares/ExpressMiddleware";

export default class ErrorHandler implements ExpressMiddleware {

    private logger: any;

    constructor(logger = winston) {
        this.logger = logger;
    }

    public setup(listener: any) {
        listener.use((err: any, req: any, res: any, next: any) => {
            const status = err.isDomain ? this.clarifyDomainException(err) : 500;
            const response = this.getResponse(err);
            this.log(status, response, err, req);
            res.status(status).send(response);
            next();
        });
    }

    public clarifyDomainException(err: any) {
        return err instanceof InvalidArgumentException ? 400 :
            err instanceof InvalidOperationException ? 403 :
                err instanceof ObjectNotFoundException ? 404 :
                    err instanceof ObjectAlreadyExistsException ? 409 :
                        err instanceof DomainException ? 418 : 500;
    }

    public getResponse(err: any) {
        const dto = ErrorDTO(err);
        if (!(<any>Configuration).debug) {
            delete dto.context;
            delete dto.stack;
        }
        return JSON.stringify(dto, null, 4);
    }

    public log(status: any, response: any, err: any, req: any) {
        if (this.isBadStatus(status)) {
            this.logger.error(status, this._mkLogEntry(err, req));
        } else if ((<any>Configuration).debug) {
            this.logger.info(status, this._mkLogEntry(err, req));
        } else {
            this.logger.info(`HTTP ${status}: ${response}`);
        }
    }

    public isBadStatus(status: any) {
        return status === 418 || status === 500 || status === 400;
    }

    private _mkLogEntry(err: any, req: any) {
        return {
            err: ErrorDTO(err),
            req: {
                body: req.body,
                cookies: req.cookies,
                hostname: req.hostname,
                method: req.method,
                originalUrl: req.originalUrl,
                params: req.params,
                query: req.query,
            },
        };
    }
}

function ErrorDTO(err: any) {
    return {
        context: err.context,
        errors: err.errors,
        isDomain: err.isDomain,
        message: err.message,
        name: err.name,
        stack: err.stack && err.stack.split("\n    ").slice(1),
    };
}
