/**
 * Created by x on 04/09/16.
 */


import {Person, MakePlanCaseRepository, PlanCaseRepository} from "infrastructure/plan-case/PlanCaseRepository";
import {MailSender, MakeMailSender} from "infrastructure/mailer/MailSender";
import {MakeCurrencyExchangeGateway} from "infrastructure/currency/CurrencyExchangeGateway";


export interface UserNotificationCommandSystem {
    buyNow(userNotificationParams: UserNotificationParams): any;
    askUs(userNotificationParams: UserNotificationParams): any;
}

export function MakeBuyNowCommandSystem(mailSender?: MailSender, planRepo?: PlanCaseRepository): UserNotificationCommandSystem {
    return new UserNotificationCommandSystemImpl(mailSender || MakeMailSender(), planRepo || MakePlanCaseRepository());
}

class UserNotificationCommandSystemImpl implements UserNotificationCommandSystem {

    private mailSender: MailSender;
    private planRepo: PlanCaseRepository;

    constructor(mailSender: MailSender, planRepo: PlanCaseRepository) {
        this.mailSender = mailSender;
        this.planRepo = planRepo;
    }

    public buyNow(data: UserNotificationParams) {
        const matches = this.planRepo.find(data);
        if (!matches || matches.length <= 0) { return "Invalid data"; }
        const plan = matches[0];
        const converter = MakeCurrencyExchangeGateway().getConverter();
        plan.convertPrice(converter);
        let mailOptionsUser = plan.getEmailContentForUser(data, "buyNow");
        let mailOptionsAdmin = plan.getEmailContentForAdmin(data, "buyNow");
        let mailOptionsCRMParser = plan.getEmailContentForAdmin(data, "buyNow");
        mailOptionsUser.to = data.userInfo.email;
        mailOptionsAdmin.to = "rost.tok@apiumhub.com";
        mailOptionsCRMParser.to = "xpjzchqm@mailparser.io";
        this.mailSender.sendMail(mailOptionsUser);
        this.mailSender.sendMail(mailOptionsAdmin);
        this.mailSender.sendMail(mailOptionsCRMParser);
        return "OK";
    }

    public askUs(data: UserNotificationParams) {
        const matches = this.planRepo.find(data);
        if (!matches || matches.length <= 0) { return "Invalid data"; }
        const plan = matches[0];
        const converter = MakeCurrencyExchangeGateway().getConverter();
        plan.convertPrice(converter);
        let mailOptionsUser = plan.getEmailContentForUser(data, "askUs");
        let mailOptionsAdmin = plan.getEmailContentForAdmin(data, "askUs");
        let mailOptionsCRMParser = plan.getEmailContentForAdmin(data, "askUs");
        mailOptionsUser.to = data.userInfo.email;
        mailOptionsAdmin.to = "rost.tok@apiumhub.com";
        mailOptionsCRMParser.to = "higuzcaw@mailparser.io";
        this.mailSender.sendMail(mailOptionsUser);
        this.mailSender.sendMail(mailOptionsAdmin);
        this.mailSender.sendMail(mailOptionsCRMParser);
        return "OK";
    }
}

export interface UserNotificationParams {
    planId: string;
    numberInsured: string;
    countryOfResidence: string;
    areaOfCover: string;
    excess: string;
    totalAnnualPremium: string;
    persons: Person[];
    userInfo: UserInfoParams;
    refId: string;
}

export interface UserInfoParams {
    firstName: string;
    lastName: string;
    email: string;
    phone?: string;
    comment?: string;
    location?: string;
    preferred?: string;
    request?: boolean;
    questions?: boolean;
}
