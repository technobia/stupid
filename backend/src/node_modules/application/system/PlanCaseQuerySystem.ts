/**
 * Created by x on 30/08/16.
 */

import {PlanCaseReadModel, PlanCaseReadModelDTO} from "domain/plan-case/PlanCaseReadModel";
import {MakeCurrencyExchangeGateway} from "infrastructure/currency/CurrencyExchangeGateway";
import {
    RawPlanCaseQueryParam,
    PlanCaseRepository,
    MakePlanCaseRepository,
} from "infrastructure/plan-case/PlanCaseRepository";
import {EntityList} from "domain/Entity";

import Paginator from "framework/Paginator";
import Configuration from "Configuration";


export interface PlanCaseQuerySystem {
    getByPlanCasesWithPagination(query: RawPlanCaseQueryParam): PlanCaseReadModelList;
}

export interface PlanCaseReadModelList extends EntityList<PlanCaseReadModel> {
    totalPlanCases: number;
}

export function MakePlanCaseQuerySystem(repo?: PlanCaseRepository): PlanCaseQuerySystem {
    return new PlanCaseQuerySystemImpl(repo || MakePlanCaseRepository());
}

class PlanCaseQuerySystemImpl implements PlanCaseQuerySystem {

    private repo: PlanCaseRepository;

    constructor(repo: PlanCaseRepository) {
        this.repo = repo;
    }

    public getByPlanCasesWithPagination(query: RawPlanCaseQueryParam): PlanCaseReadModelList {
        const converter = MakeCurrencyExchangeGateway().getConverter();
        const plancases = this.repo.find(query);
        plancases.forEach((plan: PlanCaseReadModel) => plan.convertPrice(converter));
        const total = 2;
        const totalPlanCases = 4;
        const paginator = new Paginator(query.page, total, Configuration.constant.PLAN_LIST_ITEM);
        return {paginator, list: plancases, totalPlanCases};
    }
}


interface PlanCaseExtendedDTO extends PlanCaseReadModelDTO {
    haveNewComment?: boolean;
}

