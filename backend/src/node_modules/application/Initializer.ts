/**
 * Created by jose on 18/12/2015.
 */

import MigrationRunner from "infrastructure/MigrationRunner";
import {MakeCurrencyExchangeGateway} from "infrastructure/currency/CurrencyExchangeGateway";
import DatabaseDiscovery from "infrastructure/DatabaseDiscovery";

const winston = require("winston");

export default class Initializer {

    constructor(
        private logger: any,
        private migrator: MigrationRunner,
        private dbDiscover: DatabaseDiscovery
    ) {}

    public static make(logger?: any, migrator?: MigrationRunner, dbDiscover?: DatabaseDiscovery) {
        return new Initializer(
            logger || winston,
            migrator || MigrationRunner.make(),
            dbDiscover || new DatabaseDiscovery()
        );
    }

    public init(): Promise<void> {
        return new Promise<void>((resolve: () => void) => resolve())
            .then(() => this.logger.info(`\n\n\n***** APP INITIALIZATION BEGINS! *****\n\n`))
            .then(() => this.dbDiscover.ping())
            .then(() => this.migrator.up())
            .then(() => MakeCurrencyExchangeGateway().precache())
            .then(() => this.logger.info(`\n\n\n***** APP INITIALIZATION ENDS SUCCESSFULLY! *****\n\n`))
            .catch((e: Error) => {
                this.logger.info("\n\n\nFATAL ERROR!! APP COULD NOT INITIALIZE!!\n\n");
                this.logger.error(e);
                process.exit(-1);
            });
        }
}
