/**
 * Created by kevin on 7/7/15.
 */

const wait = require("wait.for");

/**
 * Runs fn in a fifo fiber, so we can use wait.for inside it, and place it in any mocha hook
 */
export default function async(fn: any) {
    return (done: any) => launchOnlyOneFiber(() => {
        let err: any;
        try {
            fn();
        } catch (e) {
            err = e;
        }
        done(err);
    });
}

/**
 * Makes sure we only execute one fiber simultaneously, and we run them in fifo order.
 * @param fn
 * @param thisFiber
 * @returns {*}
 */
let fiberCount = 0;
let currentFiber = 0;
function launchOnlyOneFiber(fn: any, thisFiber = fiberCount): any {
    if (thisFiber === fiberCount) {
        fiberCount++;
    }
    if (thisFiber !== currentFiber) {
        return setImmediate(() => launchOnlyOneFiber(fn, thisFiber));
    }
    wait.launchFiber(() => {
        fn();
        currentFiber++;
    });
}

["beforeEach", "afterEach", "before", "after", "it"].forEach( (hook: string) => {
    (<any>async)[hook] = (...args: any[]) => {
        args = args.map( (val: any) => typeof val === "function" ? async(val) : val);
        GLOBAL[hook](...args);
    };
});
